#include "binary_trees.h"
#include "queue.h"

/**
 * binary_tree_is_complete - Checks if a binary tree is complete
 *
 * @tree: Pointer to the root node of the tree to check
 *
 * Return: 1 if the tree is complete, otherwise 0. If tree is NULL, return 0.
 */
int binary_tree_is_complete(const binary_tree_t *tree)
{
    if (tree == NULL)
        return 0;

    queue_t *queue = queue_create();
    if (queue == NULL)
        return 0;

    int is_last_level = 0;

    enqueue(queue, (void *)tree);

    while (!is_empty(queue))
    {
        binary_tree_t *current_node = (binary_tree_t *)dequeue(queue);

        if (current_node == NULL)
            is_last_level = 1;
        else
        {
            if (is_last_level)
            {
                queue_delete(queue);
                return 0;
            }

            enqueue(queue, (void *)current_node->left);
            enqueue(queue, (void *)current_node->right);
        }
    }

    queue_delete(queue);
    return 1;
}
